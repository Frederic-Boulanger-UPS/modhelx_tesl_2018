/*
 * generated by Xtext
 */
package fr.supelec.tesl.lang.serializer;

import com.google.inject.Inject;
import fr.supelec.tesl.lang.services.TESLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class TESLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TESLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BasicExpr_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_BasicExpr_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_FloatCast_DoubleKeyword_0_1_or_FloatKeyword_0_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TESLGrammarAccess) access;
		match_BasicExpr_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getBasicExprAccess().getLeftParenthesisKeyword_1_0());
		match_BasicExpr_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getBasicExprAccess().getLeftParenthesisKeyword_1_0());
		match_FloatCast_DoubleKeyword_0_1_or_FloatKeyword_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFloatCastAccess().getDoubleKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getFloatCastAccess().getFloatKeyword_0_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BasicExpr_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_BasicExpr_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BasicExpr_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_BasicExpr_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FloatCast_DoubleKeyword_0_1_or_FloatKeyword_0_0.equals(syntax))
				emit_FloatCast_DoubleKeyword_0_1_or_FloatKeyword_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '$' ref=[Let|ID]
	 *     (rule start) (ambiguity) '[decimal' expr=Expression
	 *     (rule start) (ambiguity) '[int ' expr=Expression
	 *     (rule start) (ambiguity) '[rational ' expr=Expression
	 *     (rule start) (ambiguity) ('[float ' | '[double') expr=Expression
	 *     (rule start) (ambiguity) sign=OpTerm
	 *     (rule start) (ambiguity) value=BIG_DECIMAL
	 *     (rule start) (ambiguity) value=BIG_INT
	 *     (rule start) (ambiguity) value=FLOAT
	 *     (rule start) (ambiguity) value=RATIONAL
	 *     (rule start) (ambiguity) {BinOp.left=}
	 */
	protected void emit_BasicExpr_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {BinOp.left=}
	 */
	protected void emit_BasicExpr_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[float ' | '[double'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) expr=Expression
	 *     (rule start) (ambiguity) expr=Expression
	 */
	protected void emit_FloatCast_DoubleKeyword_0_1_or_FloatKeyword_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
