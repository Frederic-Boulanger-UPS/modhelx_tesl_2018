/*
* generated by Xtext
*/
package fr.supelec.tesl.lang.ui.labeling

import com.google.inject.Inject
import fr.supelec.tesl.lang.tesl.Clock
import fr.supelec.tesl.lang.tesl.TagRelation
import fr.supelec.tesl.lang.tesl.ImplicationRelation
import fr.supelec.tesl.lang.tesl.DelayedQualifier
import fr.supelec.tesl.lang.tesl.SustainedQualifier
import fr.supelec.tesl.lang.tesl.TimeDelayedQualifier
import fr.supelec.tesl.lang.tesl.Pattern
import fr.supelec.tesl.lang.tesl.FilteredQualifier
import fr.supelec.tesl.lang.tesl.SameTagsExpr
import fr.supelec.tesl.lang.tesl.AffineTagsExpr

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
class TESLLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	@Inject
	new(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	def text(Clock c) {
		return c.name + ' : ' + c.type + '-clock '
	}
	
	def text(TagRelation r) {
		if(r.expr != null)
			return 'Tag relation ' + r.expr.text()
		else return 'Tag relation'
	}
	
	def text(SameTagsExpr e) {
		return e.clockY + ' = ' + e.clockX;
	}
	
	def text(AffineTagsExpr e) {
		return e.clockY + ' = ' + e.valueA + ' * ' + e.clockX + ' + ' + e.valueB
	}
	
	def text(ImplicationRelation r) {
		return 'Implication relation ' + r.source.name + ' â†’ ' + r.target.name
	}
	
	def text(DelayedQualifier q) {
		return 'delayed by ' + q.count + ' on ' + q.clock.name
	}
	
	def text(SustainedQualifier q) {
		return 'sustained from ' + q.startClock.name + ' to ' + q.endClock.name
	}
	
	def text(TimeDelayedQualifier q) {
		return 'time delayed'
	}
	
	def text(FilteredQualifier q) {
		return 'filtered by ' + q.pattern.text()
	}
	
	def text(Pattern p) {
		return p.skip + ', ' + p.keep + ' (' + p.repskip + ', ' + p.repkeep + ')*'
	}

	// Labels and icons can be computed like this:
	
//	def text(Greeting ele) {
//		'A greeting to ' + ele.name
//	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
