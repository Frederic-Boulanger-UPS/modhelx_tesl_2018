/*
* generated by Xtext
*/
package fr.supelec.tesl.lang.ui.outline

import fr.supelec.tesl.lang.tesl.Clock
import fr.supelec.tesl.lang.tesl.ImplicationQualifier
import fr.supelec.tesl.lang.tesl.ImplicationRelation
import fr.supelec.tesl.lang.tesl.Specification
import fr.supelec.tesl.lang.tesl.TagRelation
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class TESLOutlineTreeProvider extends DefaultOutlineTreeProvider {

	def protected _isLeaf(Clock c) {
		return true
	}

	
	def protected _createChildren(DocumentRootNode parentNode, Specification spec) {
		//createNode(parentNode, spec.decl)
		val clockDeclNode = new VirtualOutlineNode(parentNode, null, "Clocks", false)
		spec.decl.forEach( d | createNode(clockDeclNode, d))

		val relationsNode = new VirtualOutlineNode(parentNode, null, "Relations", false)
		spec.rel.forEach( r | createNode(relationsNode, r))
		
		if(spec.pragmas.size > 0) {
			val pragmasNode = new VirtualOutlineNode(parentNode, null, "Pragmas", false)
			spec.pragmas.forEach( p | createNode(pragmasNode, p))
		}
	}

	def protected _isLeaf(ImplicationRelation r) {
		return r.qual == null
	}
	
	def protected _isLeaf(TagRelation r) {
		return true;
	}
	
	def protected _isLeaf(ImplicationQualifier q) {
		return true;
	}
	
}

class VirtualOutlineNode extends AbstractOutlineNode {
	
	protected new(IOutlineNode parent, Image image, Object text, boolean isLeaf) {
		super(parent, image, text, isLeaf)
	}
	
}